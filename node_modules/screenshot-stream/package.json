{
  "_args": [
    [
      {
        "raw": "screenshot-stream@^4.1.0",
        "scope": null,
        "escapedName": "screenshot-stream",
        "name": "screenshot-stream",
        "rawSpec": "^4.1.0",
        "spec": ">=4.1.0 <5.0.0",
        "type": "range"
      },
      "/Users/Monk/Desktop/GUSTAVO/site-grid/monk-framework/node_modules/pageres"
    ]
  ],
  "_from": "screenshot-stream@>=4.1.0 <5.0.0",
  "_id": "screenshot-stream@4.1.0",
  "_inCache": true,
  "_location": "/screenshot-stream",
  "_nodeVersion": "6.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/screenshot-stream-4.1.0.tgz_1476628118400_0.39696319308131933"
  },
  "_npmUser": {
    "name": "kevva",
    "email": "kevinmartensson@gmail.com"
  },
  "_npmVersion": "3.10.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "screenshot-stream@^4.1.0",
    "scope": null,
    "escapedName": "screenshot-stream",
    "name": "screenshot-stream",
    "rawSpec": "^4.1.0",
    "spec": ">=4.1.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pageres"
  ],
  "_resolved": "https://registry.npmjs.org/screenshot-stream/-/screenshot-stream-4.1.0.tgz",
  "_shasum": "cd876a206a57c3b1d452a40a3b68420f45e7c5c9",
  "_shrinkwrap": null,
  "_spec": "screenshot-stream@^4.1.0",
  "_where": "/Users/Monk/Desktop/GUSTAVO/site-grid/monk-framework/node_modules/pageres",
  "author": {
    "name": "Kevin Mårtensson",
    "email": "kevinmartensson@gmail.com",
    "url": "github.com/kevva"
  },
  "bugs": {
    "url": "https://github.com/kevva/screenshot-stream/issues"
  },
  "dependencies": {
    "base64-stream": "^0.1.2",
    "byline": "^4.2.1",
    "object-assign": "^4.0.1",
    "parse-cookie-phantomjs": "^1.0.0",
    "phantom-bridge": "^2.0.0"
  },
  "description": "Capture screenshot of a website and return it as a stream",
  "devDependencies": {
    "ava": "*",
    "cookie": "^0.2.3",
    "get-port": "^2.1.0",
    "get-stream": "^1.1.0",
    "image-size": "^0.4.0",
    "is-jpg": "^1.0.0",
    "is-png": "^1.0.0",
    "pify": "^2.3.0",
    "png-js": "^0.1.1",
    "rfpify": "^1.0.0",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "cd876a206a57c3b1d452a40a3b68420f45e7c5c9",
    "tarball": "https://registry.npmjs.org/screenshot-stream/-/screenshot-stream-4.1.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js",
    "stream.js"
  ],
  "gitHead": "dfc8efc3291e728aa4bff23217e2368a5ae6860b",
  "homepage": "https://github.com/kevva/screenshot-stream#readme",
  "keywords": [
    "image",
    "page",
    "phantom",
    "phantomjs",
    "resolution",
    "screen",
    "screenshot",
    "size",
    "stream",
    "url"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "kevva",
      "email": "kevinmartensson@gmail.com"
    },
    {
      "name": "samverschueren",
      "email": "sam.verschueren@gmail.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "screenshot-stream",
  "optionalDependencies": {},
  "readme": "# screenshot-stream [![Build Status](https://travis-ci.org/kevva/screenshot-stream.svg?branch=master)](https://travis-ci.org/kevva/screenshot-stream)\n\n> Capture screenshot of a website and return it as a stream\n\n\n## Install\n\n```\n$ npm install --save screenshot-stream\n```\n\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst screenshot = require('screenshot-stream');\n\nconst stream = screenshot('http://google.com', '1024x768', {crop: true});\n\nstream.pipe(fs.createWriteStream('google.com-1024x768.png'));\n```\n\n\n## API\n\n### screenshot(url, size, [options])\n\n#### url\n\nType: `string`\n\nAdd page to capture.\n\n#### size\n\nType: `string`\n\nSet viewport size.\n\n#### options\n\nType: `Object`\n\nDefine options to be used.\n\n##### crop\n\nType: `Boolean`<br>\nDefault: `false`\n\nCrop to the set height.\n\n##### delay\n\nType: `number` *(seconds)*<br>\nDefault: `0`\n\nDelay capturing the screenshot. Useful when the site does things after load that you want to capture.\n\n##### timeout\n\nType: `number` *(seconds)*<br>\nDefault: `60`\n\nNumber of seconds after which PhantomJS aborts the request.\n\n##### selector\n\nType: `string`\n\nCapture a specific DOM element.\n\n##### css\n\nType: `string`\n\nApply custom CSS to the webpage. Specify some CSS or the path to a CSS file.\n\n##### script\n\nType: `string`\n\nApply custom JavaScript to the webpage. Specify some JavaScript or the path to a file.\n\n##### hide\n\nType: `Array`\n\nHide an array of DOM elements.\n\n##### headers\n\nType: `Object`<br>\nDefault: `{}`\n\nSet custom headers.\n\n##### cookies\n\nType: `Array` or `Object`\n\nA string with the same format as a [browser cookie](http://en.wikipedia.org/wiki/HTTP_cookie) or an object of what [`phantomjs.addCookie`](http://phantomjs.org/api/phantom/method/add-cookie.html) accepts.\n\n##### username\n\nType: `string`\n\nUsername for authenticating with HTTP auth.\n\n##### password\n\nType: `string`\n\nPassword for authenticating with HTTP auth.\n\n##### format\n\nType: `string`<br>\nDefault: `png`\n\nSet format to render the image as. Supported formats are `png` and `jpg`.\n\n##### scale\n\nType: `number`<br>\nDefault: `1`\n\nScale webpage `n` times.\n\n##### userAgent\n\nType: `string`\n\nSet a custom user agent.\n\n#### .on('error', callback)\n\nType: `Function`\n\nPhantomJS errors.\n\n#### .on('warning', callback)\n\nType: `Function`\n\nWarnings with for example page errors.\n\n\n## CLI\n\nSee the [pageres](https://github.com/sindresorhus/pageres#usage) CLI.\n\n\n## License\n\nMIT © [Kevin Mårtensson](https://github.com/kevva)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kevva/screenshot-stream.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "4.1.0",
  "xo": {
    "esnext": true,
    "overrides": [
      {
        "files": "stream.js",
        "esnext": false,
        "rules": {
          "import/no-extraneous-dependencies": 0,
          "import/no-unresolved": 0
        }
      }
    ]
  }
}
