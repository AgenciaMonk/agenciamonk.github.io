'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _stream = require('stream');

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _arrayUniq = require('array-uniq');

var _arrayUniq2 = _interopRequireDefault(_arrayUniq);

var _arrayDiffer = require('array-differ');

var _arrayDiffer2 = _interopRequireDefault(_arrayDiffer);

var _easydate = require('easydate');

var _easydate2 = _interopRequireDefault(_easydate);

var _fsWriteStreamAtomic = require('fs-write-stream-atomic');

var _fsWriteStreamAtomic2 = _interopRequireDefault(_fsWriteStreamAtomic);

var _getRes = require('get-res');

var _getRes2 = _interopRequireDefault(_getRes);

var _logSymbols = require('log-symbols');

var _logSymbols2 = _interopRequireDefault(_logSymbols);

var _mem = require('mem');

var _mem2 = _interopRequireDefault(_mem);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _screenshotStream = require('screenshot-stream');

var _screenshotStream2 = _interopRequireDefault(_screenshotStream);

var _viewportList = require('viewport-list');

var _viewportList2 = _interopRequireDefault(_viewportList);

var _protocolify = require('protocolify');

var _protocolify2 = _interopRequireDefault(_protocolify);

var _filenamify = require('filenamify');

var _filenamify2 = _interopRequireDefault(_filenamify);

var _filenamifyUrl = require('filenamify-url');

var _filenamifyUrl2 = _interopRequireDefault(_filenamifyUrl);

var _lodash = require('lodash.template');

var _lodash2 = _interopRequireDefault(_lodash);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _plur = require('plur');

var _plur2 = _interopRequireDefault(_plur);

var _unusedFilename = require('unused-filename');

var _unusedFilename2 = _interopRequireDefault(_unusedFilename);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getResMem = (0, _mem2.default)(_getRes2.default);
const viewportListMem = (0, _mem2.default)(_viewportList2.default);

let listener;

class Pageres extends _events2.default {

	constructor(options) {
		super();

		this.options = (0, _assign2.default)({}, options);
		this.options.filename = this.options.filename || '<%= url %>-<%= size %><%= crop %>';
		this.options.format = this.options.format || 'png';
		this.options.incrementalName = this.options.incrementalName || false;

		this.stats = {};
		this.items = [];
		this.sizes = [];
		this.urls = [];
		this._src = [];
	}

	src(url, sizes, options) {
		if (url === undefined) {
			return this._src;
		}

		this._src.push({ url: url, sizes: sizes, options: options });
		return this;
	}

	dest(dir) {
		if (dir === undefined) {
			return this._dest;
		}

		this._dest = dir;
		return this;
	}

	run() {
		var _this = this;

		return (0, _asyncToGenerator3.default)(function* () {
			yield _promise2.default.all(_this.src().map(function (src) {
				// eslint-disable-line array-callback-return
				const options = (0, _assign2.default)({}, _this.options, src.options);
				const sizes = (0, _arrayUniq2.default)(src.sizes.filter(/./.test, /^\d{2,4}x\d{2,4}$/i));
				const keywords = (0, _arrayDiffer2.default)(src.sizes, sizes);

				if (!src.url) {
					throw new Error('URL required');
				}

				_this.urls.push(src.url);

				if (sizes.length === 0 && keywords.indexOf('w3counter') !== -1) {
					return _this.resolution(src.url, options);
				}

				if (keywords.length > 0) {
					return _this.viewport({ url: src.url, sizes: sizes, keywords: keywords }, options);
				}

				for (const size of sizes) {
					_this.sizes.push(size);
					_this.items.push(_this.create(src.url, size, options));
				}
			}));

			_this.stats.urls = (0, _arrayUniq2.default)(_this.urls).length;
			_this.stats.sizes = (0, _arrayUniq2.default)(_this.sizes).length;
			_this.stats.screenshots = _this.items.length;

			if (!_this.dest()) {
				return _this.items;
			}

			yield _this.save(_this.items);

			return _this.items;
		})();
	}

	resolution(url, options) {
		var _this2 = this;

		return (0, _asyncToGenerator3.default)(function* () {
			for (const item of yield getResMem()) {
				_this2.sizes.push(item.item);
				_this2.items.push(_this2.create(url, item.item, options));
			}
		})();
	}

	viewport(obj, options) {
		var _this3 = this;

		return (0, _asyncToGenerator3.default)(function* () {
			for (const item of yield viewportListMem(obj.keywords)) {
				_this3.sizes.push(item.size);
				obj.sizes.push(item.size);
			}

			for (const size of (0, _arrayUniq2.default)(obj.sizes)) {
				_this3.items.push(_this3.create(obj.url, size, options));
			}
		})();
	}

	save(streams) {
		var _this4 = this;

		const files = [];

		const end = () => _promise2.default.all(files.map(file => (0, _pify2.default)(_rimraf2.default)(file)));

		if (!listener) {
			listener = process.on('SIGINT', (0, _asyncToGenerator3.default)(function* () {
				yield end();
				process.exit(1);
			}));
		}

		return _promise2.default.all(streams.map(stream => new _promise2.default((() => {
			var _ref2 = (0, _asyncToGenerator3.default)(function* (resolve, reject) {
				yield (0, _pify2.default)(_mkdirp2.default)(_this4.dest());

				const dest = _path2.default.join(_this4.dest(), stream.filename);
				const write = (0, _fsWriteStreamAtomic2.default)(dest);

				files.push(write.__atomicTmp);

				stream.on('warning', _this4.emit.bind(_this4, 'warning'));
				stream.on('warn', _this4.emit.bind(_this4, 'warn'));
				stream.on('error', (() => {
					var _ref3 = (0, _asyncToGenerator3.default)(function* (err) {
						yield end();
						reject(err);
					});

					return function (_x3) {
						return _ref3.apply(this, arguments);
					};
				})());

				write.on('finish', resolve);
				write.on('error', (() => {
					var _ref4 = (0, _asyncToGenerator3.default)(function* (err) {
						yield end();
						reject(err);
					});

					return function (_x4) {
						return _ref4.apply(this, arguments);
					};
				})());

				stream.pipe(write);
			});

			return function (_x, _x2) {
				return _ref2.apply(this, arguments);
			};
		})())));
	}

	create(uri, size, options) {
		const sizes = size.split('x');
		const stream = (0, _screenshotStream2.default)((0, _protocolify2.default)(uri), size, options);

		// Coercing to string here to please Flow
		// TODO: Should fix the Flow type so this isn't necessary
		const filename = (0, _lodash2.default)(`${String(options.filename)}.${String(options.format)}`);

		let hash = _url2.default.parse(uri).hash || '';

		if (_path2.default.isAbsolute(uri)) {
			uri = _path2.default.basename(uri);
		}

		// Strip empty hash fragments: `#` `#/` `#!/`
		if (/^#!?\/?$/.test(hash)) {
			hash = '';
		}

		stream.filename = filename({
			crop: options.crop ? '-cropped' : '',
			date: (0, _easydate2.default)('Y-M-d'),
			time: (0, _easydate2.default)('h-m-s'),
			size: size,
			width: sizes[0],
			height: sizes[1],
			url: (0, _filenamifyUrl2.default)(uri) + (0, _filenamify2.default)(hash)
		});

		if (options.incrementalName) {
			stream.filename = _unusedFilename2.default.sync(stream.filename);
		}

		return stream;
	}

	successMessage() {
		const stats = this.stats;
		const screenshots = stats.screenshots,
		      sizes = stats.sizes,
		      urls = stats.urls;

		const words = {
			screenshots: (0, _plur2.default)('screenshot', screenshots),
			sizes: (0, _plur2.default)('size', sizes),
			urls: (0, _plur2.default)('url', urls)
		};

		console.log(`\n${_logSymbols2.default.success} Generated ${screenshots} ${words.screenshots} from ${urls} ${words.urls} and ${sizes} ${words.sizes}`);
	}
}
exports.default = Pageres;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,