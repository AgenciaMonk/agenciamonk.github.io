{
  "_args": [
    [
      {
        "raw": "easydate@^2.0.0",
        "scope": null,
        "escapedName": "easydate",
        "name": "easydate",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/Monk/Desktop/GUSTAVO/site-grid/monk-framework/node_modules/pageres"
    ]
  ],
  "_from": "easydate@>=2.0.0 <3.0.0",
  "_id": "easydate@2.2.1",
  "_inCache": true,
  "_location": "/easydate",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/easydate-2.2.1.tgz_1490162389578_0.15251875831745565"
  },
  "_npmUser": {
    "name": "roryrjb",
    "email": "roryrjb@protonmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "easydate@^2.0.0",
    "scope": null,
    "escapedName": "easydate",
    "name": "easydate",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pageres"
  ],
  "_resolved": "https://registry.npmjs.org/easydate/-/easydate-2.2.1.tgz",
  "_shasum": "689eb7dd1304899a2f4bc66246787f5dbe617fc6",
  "_shrinkwrap": null,
  "_spec": "easydate@^2.0.0",
  "_where": "/Users/Monk/Desktop/GUSTAVO/site-grid/monk-framework/node_modules/pageres",
  "author": {
    "name": "Rory Bradford",
    "email": "roryrjb@protonmail.com"
  },
  "bugs": {
    "url": "http://github.com/roryrjb/easydate/issues",
    "email": "roryrjb@protonmail.com"
  },
  "dependencies": {
    "mocha": "^3.2.0"
  },
  "description": "get date and/or time by pattern",
  "devDependencies": {
    "standard": "^9.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "689eb7dd1304899a2f4bc66246787f5dbe617fc6",
    "tarball": "https://registry.npmjs.org/easydate/-/easydate-2.2.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "easydate.js"
  ],
  "gitHead": "3aeed6eb5c14936f5ea9df9b19709b1cf3150b71",
  "homepage": "https://github.com/roryrjb/easydate",
  "keywords": [
    "datetime",
    "dateformat",
    "formatting",
    "date",
    "time"
  ],
  "license": "MIT",
  "main": "easydate.js",
  "maintainers": [
    {
      "name": "roryrjb",
      "email": "roryrjb@gmail.com"
    }
  ],
  "name": "easydate",
  "optionalDependencies": {},
  "readme": "# easydate\n\n[![Build Status](https://travis-ci.org/roryrjb/easydate.svg?branch=master)](https://travis-ci.org/roryrjb/easydate) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard) [![Greenkeeper badge](https://badges.greenkeeper.io/roryrjb/easydate.svg)](https://greenkeeper.io/)\n\n> Returns the date according to a pattern.\n\n### Installation\n\n```\n$ npm install easydate\n```\n\n...or:\n\n```\n$ yarn add easydate\n```\n\n### Usage/API\n\n__easydate(patternString, [config])__\n\nThe single exported function has two arguments. The first and only required argument is the pattern string (see _Pattern Options_ below). If only including the pattern string it will return a formatted string for the current date-time.\n\n__`config`__ (object)\n\n__`.setDate`__ (string)\n\nDEFAULT: `null`\n\nif the optional config object is supplied and includes a date string as the `setDate` key value, that particular date will be returned formatted. This input date string must be parseable by JavaScript's `Date.parse` function; see below for acceptable examples.\n\n__`.timeZone`__ (string: `utc` or `local` only) _BREAKING CHANGE!!!_\n\nDEFAULT: `local`\n\nYou can also include a `timeZone` key value, for either `local`, or `utc` to decide how to handle the time zone offset against UTC.\n\n__`.adjust`__ (boolean)\n\nDEFAULT: `false`\n\nWhether or not to adjust DST, see _times_ below.\n\n__Times:__\n\n```\n-- local --\n\n2016-01-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-02-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-03-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-04-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-05-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-06-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-07-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-08-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-09-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-10-01T00:00:00.000Z --> 01:00:00 UTC+1 DST\n2016-11-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-12-01T00:00:00.000Z --> 00:00:00 UTC+1\n\n-- local {adjust: true} --\n\n2016-01-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-02-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-03-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-04-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-05-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-06-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-07-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-08-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-09-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-10-01T00:00:00.000Z --> 00:00:00 UTC+1 DST\n2016-11-01T00:00:00.000Z --> 00:00:00 UTC+1\n2016-12-01T00:00:00.000Z --> 00:00:00 UTC+1\n\n-- utc --\n\n2016-01-01T00:00:00.000Z --> 00:00:00 UTC\n2016-02-01T00:00:00.000Z --> 00:00:00 UTC\n2016-03-01T00:00:00.000Z --> 00:00:00 UTC\n2016-04-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-05-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-06-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-07-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-08-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-09-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-10-01T00:00:00.000Z --> 00:00:00 UTC DST\n2016-11-01T00:00:00.000Z --> 00:00:00 UTC\n2016-12-01T00:00:00.000Z --> 00:00:00 UTC\n```\n\n__Examples:__\n\n```javascript\nvar easydate = require('easydate')\n\n// current date/time\neasydate('d-M-y') // \"28-01-14\"\neasydate('d/M/Y') // \"28/01/2014\"\neasydate('Y.M.d') // \"2014.01.28\"\neasydate('M') // \"01\"\neasydate('d-M-Y @ h:m:s.l') // \"29-01-2014 @ 07:22:37.418\"\n\n// specified date/time\neasydate('d-M-Y @ h:m', '2015-11-03T16:06:00.000Z') // \"03-11-2015 @ 16:06\"\neasydate('h:m:s.l', '2015-11-03T16:06:08.123Z') // \"16:06:08.123\"\neasydate('M~d~Y', '03-01-2017') // \"03~01~2017\"\n\n// time zone (e.g. in UTC+1)\neasydate('d/M/y', {setDate: '2016-10-01T00:00:00.000Z', timeZone: 'utc'}) // => \"30/09/16\"\neasydate('d/M/y', {setDate: '2016-10-01T00:00:00.000Z', timeZone: 'local'}) // => \"01/10/16\"\n\neasydate('z', {timeZone: 'utc'}) // => \"UTC\"\neasydate('z', {timeZone: 'local'}) // => \"UTC+1\"\n\neasydate('h:m:s z x', {setDate: '2016-08-01T00:00:00.000Z'}) // => \"01:00:00 UTC+1 DST\"\neasydate('h:m:s z x', {setDate: '2016-08-01T00:00:00.000Z', adjust: true}) // => \"00:00:00 UTC+1 DST\"\n```\n\n### Pattern Options\n\n* `Y` Full year (number - e.g. `2012`)\n* `y` Year (number - e.g. `12`)\n* `M` Month (number - e.g. `11`)\n* `d` Day (number - e.g. `28`)\n* `h` Hour (number - e.g. `02`)\n* `m` Minute (number - e.g. `01`)\n* `s` Second (number - e.g. `33`)\n* `l` Millisecond (number - e.g. `001`)\n* `z` Timezone (string - e.g. `UTC`, `UTC+1`, `UTC-11`)\n* `x` DST (string - either `'DST'` or `''`)\n\n_N.B. Case sensitive_\n\n### Caveats\n\nAny instances of the above characters will be replaced with the relevant numbers. It is recommended to not use words within the pattern string.\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/roryrjb/easydate.git"
  },
  "scripts": {
    "test": "standard && ./node_modules/.bin/mocha"
  },
  "version": "2.2.1"
}
